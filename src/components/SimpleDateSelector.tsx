import React, { useState } from 'react';
import { 
  View, 
  Text, 
  TouchableOpacity, 
  TextInput, 
  StyleSheet,
} from 'react-native';
import Calendar from './Calendar';

interface SimpleDateSelectorProps {
  label: string;
  value: string;
  onChange: (date: string) => void;
  placeholder?: string;
  error?: string;
  required?: boolean;
  minDate?: string; // Ng√†y t·ªëi thi·ªÉu c√≥ th·ªÉ ch·ªçn
  maxDate?: string; // Ng√†y t·ªëi ƒëa c√≥ th·ªÉ ch·ªçn
}

const SimpleDateSelector: React.FC<SimpleDateSelectorProps> = ({
  label,
  value,
  onChange,
  placeholder = 'DD/MM/YYYY',
  error,
  required = false,
  minDate,
  maxDate,
}) => {
  const [showCalendar, setShowCalendar] = useState(false);

  const showDatePicker = () => {
    console.log('üóìÔ∏è Opening beautiful calendar');
    setShowCalendar(true);
  };

  const onDateSelect = (date: string) => {
    console.log('‚úÖ Date selected from calendar:', date);
    onChange(date);
    setShowCalendar(false);
  };

  const onCalendarClose = () => {
    console.log('ÔøΩ Calendar closed');
    setShowCalendar(false);
  };

  const handleTextInput = (text: string) => {
    console.log('Input text:', text);
    
    const formattedDate = formatDateInput(text);
    onChange(formattedDate);
  };
  /**
   * T·ª± ƒë·ªông format ng√†y th√†nh yyyy-mm-dd cho l∆∞u tr·ªØ d·ªØ li·ªáu
   * H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: dd/mm/yyyy, dd-mm-yyyy, dd.mm.yyyy, ddmmyyyy
   * Tr·∫£ v·ªÅ yyyy-mm-dd khi ƒë·∫ßy ƒë·ªß th√¥ng tin, ng∆∞·ª£c l·∫°i tr·∫£ v·ªÅ d·∫°ng hi·ªÉn th·ªã
   */
  const formatDateInput = (input: string): string => {
    // N·∫øu ƒë√£ ƒë√∫ng format yyyy-mm-dd th√¨ gi·ªØ nguy√™n
    if (/^\d{4}-\d{2}-\d{2}$/.test(input)) {
      return input;
    }
    
    // X√≥a t·∫•t c·∫£ k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
    const numbersOnly = input.replace(/\D/g, '');
    
    // N·∫øu kh√¥ng c√≥ s·ªë n√†o th√¨ tr·∫£ v·ªÅ r·ªóng
    if (!numbersOnly) return '';
    
    const length = numbersOnly.length;
    
    if (length <= 2) {
      // Ch·ªâ c√≥ ng√†y: 01, 15 -> hi·ªÉn th·ªã 01, 15
      return numbersOnly;
    } else if (length <= 4) {
      // Ng√†y + th√°ng: 0115, 1503 -> hi·ªÉn th·ªã 01/15, 15/03
      const day = numbersOnly.slice(0, 2);
      const month = numbersOnly.slice(2, 4);
      return `${day}/${month}`;
    } else if (length <= 6) {
      // Ng√†y + th√°ng + m·ªôt ph·∫ßn nƒÉm: 011524 -> hi·ªÉn th·ªã 01/15/24
      const day = numbersOnly.slice(0, 2);
      const month = numbersOnly.slice(2, 4);
      const year = numbersOnly.slice(4, 6);
      return `${day}/${month}/${year}`;
    } else if (length === 7) {
      // 7 s·ªë - c√≥ th·ªÉ l√† ddmmyyy -> hi·ªÉn th·ªã dd/mm/yyy
      const day = numbersOnly.slice(0, 2);
      const month = numbersOnly.slice(2, 4);
      const year = numbersOnly.slice(4, 7);
      return `${day}/${month}/${year}`;
    } else if (length >= 8) {
      // ƒê·∫ßy ƒë·ªß 8 s·ªë tr·ªü l√™n: ddmmyyyy
      const day = numbersOnly.slice(0, 2);
      const month = numbersOnly.slice(2, 4);
      const year = numbersOnly.slice(4, 8);
      
      // Validate ng√†y
      const dayNum = parseInt(day);
      const monthNum = parseInt(month);
      const yearNum = parseInt(year);
      
      // Validate date ranges
      if (dayNum >= 1 && dayNum <= 31 && 
          monthNum >= 1 && monthNum <= 12 && 
          yearNum >= 1900 && yearNum <= 2100) {
        // QUAN TR·ªåNG: Tr·∫£ v·ªÅ yyyy-mm-dd cho l∆∞u tr·ªØ d·ªØ li·ªáu
        return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
      }
      
      // N·∫øu kh√¥ng h·ª£p l·ªá, hi·ªÉn th·ªã d·∫°ng dd/mm/yyyy
      return `${day}/${month}/${year}`;
    }
    
    return input;
  };

  /**
   * Chuy·ªÉn ƒë·ªïi t·ª´ yyyy-mm-dd sang dd/MM/yyyy ƒë·ªÉ hi·ªÉn th·ªã
   */
  const getDisplayValue = (): string => {
    if (!value) return '';
    
    // N·∫øu ƒë√£ ·ªü d·∫°ng yyyy-mm-dd, convert sang dd/MM/yyyy
    if (/^\d{4}-\d{2}-\d{2}$/.test(value)) {
      const [year, month, day] = value.split('-');
      return `${day}/${month}/${year}`;
    }
    
    // N·∫øu kh√¥ng ph·∫£i yyyy-mm-dd, c√≥ th·ªÉ ƒëang trong qu√° tr√¨nh nh·∫≠p
    return value;
  };

  return (
    <View style={styles.container}>
      <View style={styles.labelRow}>
        <Text style={styles.label}>{label}</Text>
        {required && <Text style={styles.asterisk}>*</Text>}
      </View>
      
      <View style={styles.inputContainer}>
        <View style={[styles.inputRow, error && styles.inputError]}>
          <TextInput
            style={styles.inputText}
            value={getDisplayValue()}
            onChangeText={handleTextInput}
            placeholder={placeholder}
            placeholderTextColor="#9CA3AF"
            keyboardType="numeric"
          />
          <TouchableOpacity 
            style={styles.iconButton}
            onPress={showDatePicker}
            activeOpacity={0.7}
            hitSlop={{ top: 10, bottom: 10, left: 10, right: 10 }}
            testID="calendarButton"
          >
            <Text style={styles.icon}>üìÖ</Text>
          </TouchableOpacity>
        </View>
      </View>
      
      {error && <Text style={styles.errorText}>{error}</Text>}

      {/* Beautiful Calendar Modal */}
      <Calendar
        visible={showCalendar}
        onClose={onCalendarClose}
        onDateSelect={onDateSelect}
        selectedDate={value}
        minDate={minDate}
        maxDate={maxDate}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginBottom: 20,
  },
  labelRow: {
    flexDirection: 'row',
    marginBottom: 8,
  },
  label: {
    fontSize: 16,
    fontWeight: '500',
    color: '#374151',
  },
  asterisk: {
    color: '#EF4444',
    marginLeft: 4,
  },
  inputContainer: {
    gap: 8,
  },
  inputRow: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#D1D5DB',
    borderRadius: 8,
    backgroundColor: '#FFFFFF',
    height: 50,
  },
  inputError: {
    borderColor: '#EF4444',
  },
  inputText: {
    flex: 1,
    paddingHorizontal: 12,
    fontSize: 16,
    color: '#374151',
    height: '100%',
  },
  iconButton: {
    width: 50,
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#3B82F6',
    borderTopRightRadius: 7,
    borderBottomRightRadius: 7,
  },
  icon: {
    fontSize: 20,
  },
  errorText: {
    marginTop: 4,
    fontSize: 14,
    color: '#EF4444',
  },
});

export default SimpleDateSelector;