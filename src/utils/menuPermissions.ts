// src/utils/menuPermissions.ts

// ========================= MENU DEFINITIONS =========================
export interface MenuItemDef {
  id: string;
  title: string;
  icon: string | any; // Can be emoji string or require() result for local images
  hasSubItems?: boolean;
  subItems?: SubMenuItemDef[];
  allowedRoles: string[];
}

export interface SubMenuItemDef {
  id: string;
  title: string;
  icon: string | any; // Can be emoji string or require() result for local images
  allowedRoles: string[];
  description?: string; // Optional description for detailed menu items
  backgroundColor?: string; // Optional background color for feature cards
  hasSubItems?: boolean; // Optional for nested submenu
  subItems?: SubMenuItemDef[]; // Optional nested submenu items
}

// ========================= ROLE GROUPS =========================
export const ROLE_GROUPS = {
  // Basic User Roles
  BASIC_USER: ['All', 'Guest', 'Desk User'],

  // Employee Roles
  EMPLOYEE: ['Employee'],

  // HR Department
  HR_ROLES: ['HR Manager', 'HR User'],

  // Sales Department  
  SALES_ROLES: ['Sales Manager', 'Sales User'],

  // Accounting Department
  ACCOUNTING_ROLES: ['Accounts Manager', 'Accounts User'],
  // Stock/Inventory Department
  STOCK_ROLES: ['Stock Manager', 'Stock User'],

  // System Admin
  ADMIN_ROLES: ['Administrator', 'System Manager'],

  // Remak Specific
  REMAK_ROLES: ['Remak User', 'Remak'],


} as const;

// ========================= MENU CONFIGURATIONS =========================
export const MENU_DEFINITIONS: MenuItemDef[] = [
  // === INVENTORY ===
  {
    id: 'inventory',
    title: 'T·ªìn Kho',
    icon: require('../assets/inventory/inventory.png'),
    hasSubItems: true,
    allowedRoles: [
      ...ROLE_GROUPS.STOCK_ROLES,
      ...ROLE_GROUPS.ADMIN_ROLES,
      ...ROLE_GROUPS.BASIC_USER
    ],
    subItems: [
      {
        id: 'stock-overview',
        title: 'T·ªïng Quan Kho',
        icon: require('../assets/overview.png'),
        allowedRoles: [
          ...ROLE_GROUPS.STOCK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'items-catalogue',
        title: 'Danh M·ª•c M·∫∑t H√†ng',
        icon: require('../assets/inventory/inventory.png'),
        allowedRoles: [
          ...ROLE_GROUPS.STOCK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'inventory-operations',
        title: 'Nghi·ªáp V·ª• T·ªìn Kho',
        icon: require('../assets/inventory/inventory.png'),
        hasSubItems: true,
        allowedRoles: [
          ...ROLE_GROUPS.STOCK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ],
        subItems: [
          {
            id: 'material-request',
            title: 'Y√™u C·∫ßu V·∫≠t T∆∞',
            icon: 'üì¶',
            description: 'T·∫°o v√† theo d√µi y√™u c·∫ßu v·∫≠t t∆∞, ƒë·∫£m b·∫£o qu√° tr√¨nh mua s·∫Øm v√† cung ·ª©ng ƒë∆∞·ª£c th·ª±c hi·ªán ƒë√∫ng h·∫°n.',
            backgroundColor: '#10b981',
            allowedRoles: [
              ...ROLE_GROUPS.STOCK_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'stock-entry',
            title: 'Nh·∫≠p Xu·∫•t Kho',
            icon: '‚ÜîÔ∏è',
            description: 'Qu·∫£n l√Ω vi·ªác nh·∫≠p v√† xu·∫•t kho, bao g·ªìm vi·ªác ƒëƒÉng k√Ω c√°c giao d·ªãch kho ƒë·ªÉ ƒë·∫£m b·∫£o l∆∞u tr·ªØ ch√≠nh x√°c v√† hi·ªáu qu·∫£.',
            backgroundColor: '#f59e0b',
            allowedRoles: [
              ...ROLE_GROUPS.STOCK_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'delivery-note',
            title: 'Phi·∫øu Giao H√†ng',
            icon: 'üöö',
            description: 'Xem chi ti·∫øt v√† qu·∫£n l√Ω c√°c phi·∫øu giao h√†ng, theo d√µi ti·∫øn ƒë·ªô giao h√†ng v√† ƒë·∫£m b·∫£o m·ªçi ƒë∆°n h√†ng ƒë∆∞·ª£c ho√†n th√†nh ƒë√∫ng h·∫πn.',
            backgroundColor: '#3b82f6',
            allowedRoles: [
              ...ROLE_GROUPS.STOCK_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'purchase-receipt',
            title: 'Phi·∫øu Nh·∫≠p H√†ng',
            icon: 'üì•',
            description: 'Xem v√† qu·∫£n l√Ω c√°c phi·∫øu nh·∫≠p h√†ng, theo d√µi h√†ng h√≥a m·ªõi nh·∫≠p v√†o kho v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i.',
            backgroundColor: '#3b82f6',
            allowedRoles: [
              ...ROLE_GROUPS.STOCK_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'pick-list',
            title: 'Danh S√°ch L·ª±a Ch·ªçn',
            icon: 'üìã',
            description: 'Qu·∫£n l√Ω v√† c·∫•u h√¨nh c√°c t√πy ch·ªçn cho h·ªá th·ªëng, gi√∫p d·ªÖ d√†ng qu·∫£n l√Ω c√°c lo·∫°i m·∫∑t h√†ng v√† quy tr√¨nh kho.',
            backgroundColor: '#8b5cf6',
            allowedRoles: [
              ...ROLE_GROUPS.STOCK_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'delivery-trip',
            title: 'Chuy·∫øn Giao H√†ng',
            icon: 'üõ£Ô∏è',
            description: 'Qu·∫£n l√Ω c√°c chuy·∫øn giao h√†ng, theo d√µi v√† b√°o c√°o s·ªë li·ªáu giao h√†ng cho c√°c b·ªô ph·∫≠n li√™n quan.',
            backgroundColor: '#ef4444',
            allowedRoles: [
              ...ROLE_GROUPS.STOCK_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'shipment',
            title: 'V·∫≠n Chuy·ªÉn',
            icon: 'üöõ',
            description: 'Theo d√µi v√† b√°o c√°o v·ªÅ vi·ªác v·∫≠n chuy·ªÉn, cung c·∫•p c√°c s·ªë li·ªáu t·ªïng h·ª£p v·ªÅ qu√° tr√¨nh v·∫≠n chuy·ªÉn v√† giao h√†ng cho qu·∫£n l√Ω.',
            backgroundColor: '#06b6d4',
            allowedRoles: [
              ...ROLE_GROUPS.STOCK_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          }
        ]
      }
    ]
  },

  //=== HR ===
  {
    id: 'hr',
    title: 'HR',
    icon: require('../assets/hr/hr.png'), // Using existing icon as example
    hasSubItems: true,
    allowedRoles: [
      ...ROLE_GROUPS.HR_ROLES,
      ...ROLE_GROUPS.ADMIN_ROLES,
      ...ROLE_GROUPS.BASIC_USER
    ],
    subItems: [
      {
        id: 'overview-hr',
        title: 'T·ªïng quan',
        icon: require('../assets/overview.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'recruitment-hr',
        title: 'Tuy·ªÉn d·ª•ng',
        icon: require('../assets/hr/recruitment.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'employees-lifecycle-hr',
        title: 'L√Ω L·ªãch C√¥ng T√°c',
        icon: require('../assets/hr/employee-lifecycle.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'performance-hr',
        title: 'Hi√™u Su·∫•t',
        icon: require('../assets/hr/performance.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'shift-attendance-hr',
        title: 'Ca L√†m Vi·ªác & ƒêi·ªÉm Danh',
        icon: require('../assets/hr/shift-attendance.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'expense-claim-hr',
        title: 'Y√™u C·∫ßu Thanh To√°n',
        icon: require('../assets/hr/expense-claim.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'leaves-hr',
        title: 'Ngh·ªâ Ph√©p',
        icon: require('../assets/hr/leaves.png'),
        hasSubItems: true,
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ],
        subItems: [
          {
            id: 'apply-hr',
            title: 'ƒê∆°n Xin Ngh·ªâ Ph√©p',
            icon: 'üìù',
            description: 'T·∫°o ƒë∆°n xin ngh·ªâ ph√©p m·ªõi v√† theo d√µi tr·∫°ng th√°i',
            backgroundColor: '#10b981',
            allowedRoles: [
              ...ROLE_GROUPS.HR_ROLES,
              ...ROLE_GROUPS.EMPLOYEE,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'compensatory',
            title: 'Y√™u C·∫ßu Ngh·ªâ Ph√©p B√π',
            icon: '‚è±',
            description: 'ƒêƒÉng k√Ω ngh·ªâ b√π cho nh·ªØng ng√†y l√†m th√™m',
            backgroundColor: '#f59e0b',
            allowedRoles: [
              ...ROLE_GROUPS.HR_ROLES,
              ...ROLE_GROUPS.EMPLOYEE,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'allocation',
            title: 'Ngh·ªâ Ph√©p H∆∞·ªüng L∆∞∆°ng',
            icon: 'üíº',
            description: 'Xem chi ti·∫øt ng√†y ph√©p ƒë∆∞·ª£c h∆∞·ªüng l∆∞∆°ng',
            backgroundColor: '#3b82f6',
            allowedRoles: [
              ...ROLE_GROUPS.HR_ROLES,
              ...ROLE_GROUPS.EMPLOYEE,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'settings',
            title: 'Lo·∫°i Ngh·ªâ Ph√©p',
            icon: '‚öôÔ∏è',
            description: 'C·∫•u h√¨nh v√† qu·∫£n l√Ω c√°c lo·∫°i ngh·ªâ ph√©p',
            backgroundColor: '#8b5cf6',
            allowedRoles: [
              ...ROLE_GROUPS.HR_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES
            ]
          },
          {
            id: 'balance',
            title: 'S·ªë D∆∞ Ng√†y Ph√©p',
            icon: 'üìä',
            description: 'B√°o c√°o chi ti·∫øt s·ªë d∆∞ ng√†y ph√©p c√° nh√¢n',
            backgroundColor: '#ef4444',
            allowedRoles: [
              ...ROLE_GROUPS.HR_ROLES,
              ...ROLE_GROUPS.EMPLOYEE,
              ...ROLE_GROUPS.ADMIN_ROLES,
              ...ROLE_GROUPS.BASIC_USER
            ]
          },
          {
            id: 'summary',
            title: 'T√≥m T·∫Øt S·ªë D∆∞ Nh√¢n Vi√™n',
            icon: 'üìà',
            description: 'B√°o c√°o t·ªïng h·ª£p cho qu·∫£n l√Ω nh√¢n s·ª±',
            backgroundColor: '#06b6d4',
            allowedRoles: [
              ...ROLE_GROUPS.HR_ROLES,
              ...ROLE_GROUPS.ADMIN_ROLES
            ]
          }
        ]
      }
    ]
  },
  // === EMPLOYEE MENU ===
  {
    id: 'employee',
    title: 'Nh√¢n vi√™n',
    icon: require('../assets/employee/foulder.png'), // Using existing icon as example
    hasSubItems: true,
    allowedRoles: [
      ...ROLE_GROUPS.EMPLOYEE,
      ...ROLE_GROUPS.REMAK_ROLES,
      ...ROLE_GROUPS.ADMIN_ROLES,
      ...ROLE_GROUPS.BASIC_USER
    ],
    subItems: [
      {
        id: 'overview-employee',
        title: 'T·ªïng quan',
        icon: require('../assets/overview.png'),
        allowedRoles: [
          ...ROLE_GROUPS.EMPLOYEE,
          ...ROLE_GROUPS.REMAK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'issue-employee',
        title: 'V·∫•n ƒë·ªÅ c·∫ßn x·ª≠ l√Ω',
        icon: require("../assets/employee/issue.png"),
        allowedRoles: [
          ...ROLE_GROUPS.EMPLOYEE,
          ...ROLE_GROUPS.REMAK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'tasks-employee',
        title: 'C√¥ng vi·ªác',
        icon: require('../assets/employee/tasks.png'),
        allowedRoles: [
          ...ROLE_GROUPS.EMPLOYEE,
          ...ROLE_GROUPS.REMAK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      },
      {
        id: 'tasks-manager-employee',
        title: 'Qu·∫£n l√Ω c√¥ng vi·ªác',
        icon: require('../assets/employee/tasks-manager.png'),
        allowedRoles: [
          ...ROLE_GROUPS.EMPLOYEE,
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      }
    ]
  },
  // === SALES MENU (Nh√¢n vi√™n kinh doanh) ===


];




// ========================= LEGACY COMPATIBILITY =========================
// Gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch v·ªõi code c≈©
export const MENU_PERMISSIONS = MENU_DEFINITIONS.reduce((acc, menu) => {
  acc[menu.id.toUpperCase()] = menu.allowedRoles;
  return acc;
}, {} as Record<string, string[]>);

export const SUB_ITEM_PERMISSIONS = MENU_DEFINITIONS.reduce((acc, menu) => {
  if (menu.subItems) {
    acc[menu.id.toUpperCase()] = menu.subItems.reduce((subAcc, subItem) => {
      subAcc[subItem.id] = subItem.allowedRoles;
      return subAcc;
    }, {} as Record<string, string[]>);
  }
  return acc;
}, {} as Record<string, Record<string, string[]>>);

// ========================= PERMISSION CHECK FUNCTIONS =========================
export function hasMenuAccess(userRoles: string[], menuId: string): boolean {
  if (!userRoles || userRoles.length === 0) {
    return false;
  }

  const menuDef = MENU_DEFINITIONS.find(menu => menu.id === menuId);
  if (!menuDef) {
    return false;
  }

  // Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 role kh·ªõp
  const hasAccess = userRoles.some(role => menuDef.allowedRoles.includes(role));

  return hasAccess;
}

/**
 * Ki·ªÉm tra user c√≥ quy·ªÅn truy c·∫≠p sub-item kh√¥ng (h·ªó tr·ª£ nested submenu)
 * @param userRoles - Danh s√°ch roles c·ªßa user  
 * @param menuId - ID c·ªßa menu cha
 * @param subItemId - ID c·ªßa sub-item
 * @param nestedSubItemId - ID c·ªßa nested sub-item (optional)
 * @returns boolean - true n·∫øu c√≥ quy·ªÅn
 */
export function hasSubItemAccess(
  userRoles: string[],
  menuId: string,
  subItemId: string,
  nestedSubItemId?: string
): boolean {
  if (!userRoles || userRoles.length === 0) {
    return false;
  }

  const menuDef = MENU_DEFINITIONS.find(menu => menu.id === menuId);
  if (!menuDef || !menuDef.subItems) {
    return false;
  }

  const subItem = menuDef.subItems.find(sub => sub.id === subItemId);
  if (!subItem) {
    return false;
  }

  // N·∫øu c√≥ nestedSubItemId, ki·ªÉm tra nested submenu
  if (nestedSubItemId && subItem.subItems) {
    const nestedSubItem = subItem.subItems.find(nested => nested.id === nestedSubItemId);
    if (!nestedSubItem) {
      return false;
    }

    const hasAccess = userRoles.some(role => nestedSubItem.allowedRoles.includes(role));
    return hasAccess;
  }

  // Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 role kh·ªõp
  const hasAccess = userRoles.some(role => subItem.allowedRoles.includes(role));

  return hasAccess;
}

/**
 * L·∫•y danh s√°ch menu items c√≥ quy·ªÅn truy c·∫≠p cho user
 * @param userRoles - Danh s√°ch roles c·ªßa user
 * @returns MenuItemDef[] - Danh s√°ch menu items ƒë∆∞·ª£c ph√©p
 */
export function getAccessibleMenus(userRoles: string[]): MenuItemDef[] {
  if (!userRoles || userRoles.length === 0) {
    return [];
  }

  return MENU_DEFINITIONS.filter(menu => {
    const hasMenuAccess = userRoles.some(role => menu.allowedRoles.includes(role));

    if (hasMenuAccess && menu.subItems) {
      // Filter sub-items theo quy·ªÅn
      menu.subItems = menu.subItems.filter(subItem =>
        userRoles.some(role => subItem.allowedRoles.includes(role))
      );
    }

    return hasMenuAccess;
  });
}

/**
 * Ki·ªÉm tra user c√≥ role c·ª• th·ªÉ kh√¥ng
 * @param userRoles - Danh s√°ch roles c·ªßa user
 * @param targetRole - Role c·∫ßn ki·ªÉm tra
 * @returns boolean - true n·∫øu c√≥ role
 */
export function hasRole(userRoles: string[], targetRole: string): boolean {
  return userRoles.includes(targetRole);
}

/**
 * Ki·ªÉm tra user c√≥ b·∫•t k·ª≥ role n√†o trong nh√≥m kh√¥ng
 * @param userRoles - Danh s√°ch roles c·ªßa user
 * @param roleGroup - Nh√≥m roles c·∫ßn ki·ªÉm tra
 * @returns boolean - true n·∫øu c√≥ √≠t nh·∫•t 1 role trong nh√≥m
 */
export function hasAnyRoleInGroup(userRoles: string[], roleGroup: string[]): boolean {
  return userRoles.some(role => roleGroup.includes(role));
}
