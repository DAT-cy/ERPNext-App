// src/utils/menuPermissions.ts

// ========================= MENU DEFINITIONS =========================
export interface MenuItemDef {
  id: string;
  title: string;
  icon: string | any; // Can be emoji string or require() result for local images
  hasSubItems?: boolean;
  subItems?: SubMenuItemDef[];
  allowedRoles: string[];
}

export interface SubMenuItemDef {
  id: string; 
  title: string;
  icon: string | any; // Can be emoji string or require() result for local images
  allowedRoles: string[];
}

// ========================= ROLE GROUPS =========================
export const ROLE_GROUPS = {
  // Basic User Roles
  BASIC_USER: ['All', 'Guest', 'Desk User'],
  
  // Employee Roles
  EMPLOYEE: ['Employee'],
  
  // HR Department
  HR_ROLES: ['HR Manager', 'HR User'],
  
  // Sales Department  
  SALES_ROLES: ['Sales Manager', 'Sales User'],
  
  // Accounting Department
  ACCOUNTING_ROLES: ['Accounts Manager', 'Accounts User'],
  
  // System Admin
  ADMIN_ROLES: ['Administrator', 'System Manager'],
  
  // Remak Specific
  REMAK_ROLES: ['Remak User', 'Remak'],
} as const;

// ========================= MENU CONFIGURATIONS =========================
export const MENU_DEFINITIONS: MenuItemDef[] = [
  //=== HR ===
  {
    id: 'hr',
    title: 'HR',
    icon: require('../assets/hr/hr.png'), // Using existing icon as example
    hasSubItems: true,
    allowedRoles: [
      ...ROLE_GROUPS.HR_ROLES,
      ...ROLE_GROUPS.ADMIN_ROLES,
      ...ROLE_GROUPS.BASIC_USER
    ],
    subItems: [
      {
        id: 'overview-hr',
        title: 'T·ªïng quan',
        icon: require('../assets/overview.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'recruitment-hr',
        title: 'Tuy·ªÉn d·ª•ng',
        icon: require('../assets/hr/recruitment.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'employees-lifecycle-hr',
        title: 'L√Ω L·ªãch C√¥ng T√°c',
        icon: require('../assets/hr/employee-lifecycle.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'performance-hr',
        title: 'Hi√™u Su·∫•t',
        icon: require('../assets/hr/performance.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'shift-attendance-hr',
        title: 'Ca L√†m Vi·ªác & ƒêi·ªÉm Danh',
        icon: require('../assets/hr/shift-attendance.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'expense-claim-hr',
        title: 'Y√™u C·∫ßu Thanh To√°n',
        icon: require('../assets/hr/expense-claim.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'leaves-hr',
        title: 'Ngh·ªâ Ph√©p',
        icon: require('../assets/hr/leaves.png'),
        allowedRoles: [
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      }
    ]
  },
  // === EMPLOYEE MENU ===
  {
    id: 'employee',
    title: 'Nh√¢n vi√™n', 
    icon: require('../assets/employee/foulder.png'), // Using existing icon as example
    hasSubItems: true,
    allowedRoles: [
      ...ROLE_GROUPS.EMPLOYEE,
      ...ROLE_GROUPS.REMAK_ROLES,
      ...ROLE_GROUPS.ADMIN_ROLES,
      ...ROLE_GROUPS.BASIC_USER
    ],
    subItems: [
      {
        id: 'overview-employee',
        title: 'T·ªïng quan',
        icon: require('../assets/overview.png'), 
        allowedRoles: [
          ...ROLE_GROUPS.EMPLOYEE,
          ...ROLE_GROUPS.REMAK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'issue-employee',
        title: 'V·∫•n ƒë·ªÅ c·∫ßn x·ª≠ l√Ω',
        icon: require("../assets/employee/issue.png"),
        allowedRoles: [
          ...ROLE_GROUPS.EMPLOYEE,
          ...ROLE_GROUPS.REMAK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES,
          ...ROLE_GROUPS.BASIC_USER
        ]
      },
      {
        id: 'tasks-employee',
        title: 'C√¥ng vi·ªác',
        icon: require('../assets/employee/tasks.png'),
        allowedRoles: [
          ...ROLE_GROUPS.EMPLOYEE,
          ...ROLE_GROUPS.REMAK_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      },
      {
        id: 'tasks-manager-employee',
        title: 'Qu·∫£n l√Ω c√¥ng vi·ªác',
        icon: require('../assets/employee/tasks-manager.png'),
        allowedRoles: [
          ...ROLE_GROUPS.EMPLOYEE,
          ...ROLE_GROUPS.HR_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      }
    ]
  },
  // === SALES MENU (Nh√¢n vi√™n kinh doanh) ===
  {
    id: 'sales',
    title: 'Kinh doanh',
    icon: 'üíº',
    hasSubItems: true,
    allowedRoles: [
      ...ROLE_GROUPS.SALES_ROLES,
      ...ROLE_GROUPS.ADMIN_ROLES
    ],
    subItems: [
      {
        id: 'dashboard',
        title: 'B·∫£ng ƒëi·ªÅu khi·ªÉn',
        icon: 'üìä',
        allowedRoles: [
          ...ROLE_GROUPS.SALES_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      },
      {
        id: 'leads',
        title: 'Kh√°ch h√†ng ti·ªÅm nƒÉng',
        icon: 'üéØ',
        allowedRoles: [
          ...ROLE_GROUPS.SALES_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      },
      {
        id: 'opportunities',
        title: 'C∆° h·ªôi b√°n h√†ng',
        icon: 'üí°',
        allowedRoles: [
          ...ROLE_GROUPS.SALES_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      },
      {
        id: 'quotations',
        title: 'B√°o gi√°',
        icon: 'üìã',
        allowedRoles: [
          ...ROLE_GROUPS.SALES_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      },
      {
        id: 'orders',
        title: 'ƒê∆°n h√†ng',
        icon: 'üõí',
        allowedRoles: [
          ...ROLE_GROUPS.SALES_ROLES,
          ...ROLE_GROUPS.ADMIN_ROLES
        ]
      }
    ]
  },





  
];

// ========================= LEGACY COMPATIBILITY =========================
// Gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch v·ªõi code c≈©
export const MENU_PERMISSIONS = MENU_DEFINITIONS.reduce((acc, menu) => {
  acc[menu.id.toUpperCase()] = menu.allowedRoles;
  return acc;
}, {} as Record<string, string[]>);

export const SUB_ITEM_PERMISSIONS = MENU_DEFINITIONS.reduce((acc, menu) => {
  if (menu.subItems) {
    acc[menu.id.toUpperCase()] = menu.subItems.reduce((subAcc, subItem) => {
      subAcc[subItem.id] = subItem.allowedRoles;
      return subAcc;
    }, {} as Record<string, string[]>);
  }
  return acc;
}, {} as Record<string, Record<string, string[]>>);



// ========================= UTILITY FUNCTIONS =========================

/**
 * Ki·ªÉm tra user c√≥ quy·ªÅn truy c·∫≠p menu kh√¥ng
 * @param userRoles - Danh s√°ch roles c·ªßa user
 * @param menuId - ID c·ªßa menu c·∫ßn ki·ªÉm tra
 * @returns boolean - true n·∫øu c√≥ quy·ªÅn
 */
export function hasMenuAccess(userRoles: string[], menuId: string): boolean {
  if (!userRoles || userRoles.length === 0) {
    return false;
  }
  
  const menuDef = MENU_DEFINITIONS.find(menu => menu.id === menuId);
  if (!menuDef) {
    return false;
  }
  
  // Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 role kh·ªõp
  const hasAccess = userRoles.some(role => menuDef.allowedRoles.includes(role));
  
  console.log(`üîê Menu ${menuDef.title}: User roles [${userRoles.join(', ')}] -> Access: ${hasAccess}`);
  
  return hasAccess;
}

/**
 * Ki·ªÉm tra user c√≥ quy·ªÅn truy c·∫≠p sub-item kh√¥ng
 * @param userRoles - Danh s√°ch roles c·ªßa user  
 * @param menuId - ID c·ªßa menu cha
 * @param subItemId - ID c·ªßa sub-item
 * @returns boolean - true n·∫øu c√≥ quy·ªÅn
 */
export function hasSubItemAccess(
  userRoles: string[],
  menuId: string, 
  subItemId: string
): boolean {
  if (!userRoles || userRoles.length === 0) {
    return false;
  }
  
  const menuDef = MENU_DEFINITIONS.find(menu => menu.id === menuId);
  if (!menuDef || !menuDef.subItems) {
    return false;
  }
  
  const subItem = menuDef.subItems.find(sub => sub.id === subItemId);
  if (!subItem) {
    return false;
  }
  
  // Ki·ªÉm tra c√≥ √≠t nh·∫•t 1 role kh·ªõp
  const hasAccess = userRoles.some(role => subItem.allowedRoles.includes(role));
  
  console.log(`üîê SubItem ${menuDef.title}.${subItem.title}: User roles [${userRoles.join(', ')}] -> Access: ${hasAccess}`);
  
  return hasAccess;
}

/**
 * L·∫•y danh s√°ch menu items c√≥ quy·ªÅn truy c·∫≠p cho user
 * @param userRoles - Danh s√°ch roles c·ªßa user
 * @returns MenuItemDef[] - Danh s√°ch menu items ƒë∆∞·ª£c ph√©p
 */
export function getAccessibleMenus(userRoles: string[]): MenuItemDef[] {
  if (!userRoles || userRoles.length === 0) {
    return [];
  }

  return MENU_DEFINITIONS.filter(menu => {
    const hasMenuAccess = userRoles.some(role => menu.allowedRoles.includes(role));
    
    if (hasMenuAccess && menu.subItems) {
      // Filter sub-items theo quy·ªÅn
      menu.subItems = menu.subItems.filter(subItem => 
        userRoles.some(role => subItem.allowedRoles.includes(role))
      );
    }
    
    return hasMenuAccess;
  });
}

/**
 * Ki·ªÉm tra user c√≥ role c·ª• th·ªÉ kh√¥ng
 * @param userRoles - Danh s√°ch roles c·ªßa user
 * @param targetRole - Role c·∫ßn ki·ªÉm tra
 * @returns boolean - true n·∫øu c√≥ role
 */
export function hasRole(userRoles: string[], targetRole: string): boolean {
  return userRoles.includes(targetRole);
}

/**
 * Ki·ªÉm tra user c√≥ b·∫•t k·ª≥ role n√†o trong nh√≥m kh√¥ng
 * @param userRoles - Danh s√°ch roles c·ªßa user
 * @param roleGroup - Nh√≥m roles c·∫ßn ki·ªÉm tra
 * @returns boolean - true n·∫øu c√≥ √≠t nh·∫•t 1 role trong nh√≥m
 */
export function hasAnyRoleInGroup(userRoles: string[], roleGroup: string[]): boolean {
  return userRoles.some(role => roleGroup.includes(role));
}
